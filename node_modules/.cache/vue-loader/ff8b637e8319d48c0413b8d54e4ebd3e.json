{"remainingRequest":"/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/src/components/forms/FormLocalization.vue?vue&type=template&id=6349730d&","dependencies":[{"path":"/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/src/components/forms/FormLocalization.vue","mtime":1602132547948},{"path":"/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/miza/Documentos/CC/web/Trabalho2Atualizado/SDA/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}